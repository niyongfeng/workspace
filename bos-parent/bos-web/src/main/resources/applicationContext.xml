<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        				http://www.springframework.org/schema/beans/spring-beans.xsd
        				http://www.springframework.org/schema/aop
        				http://www.springframework.org/schema/aop/spring-aop.xsd
        				http://www.springframework.org/schema/tx
        				http://www.springframework.org/schema/tx/spring-tx.xsd
        				http://www.springframework.org/schema/context
        				http://www.springframework.org/schema/context/spring-context.xsd">
    
    
    <!-- 配置开启组件扫描
    	到基础包下扫描所有的类，看类上面是不是加了注解(@Repository、@Service)，如果加了注解，
    	Spring就会创建Bean的实例，再交由Spring容器管理
     -->
    <context:component-scan base-package="cn.itcast.bos.dao,cn.itcast.bos.service"/>
    
    <!-- 配置加载属性文件产生占位符 -->
    <context:property-placeholder location="classpath:jdbc.properties,classpath:bos.properties"/>
    
   	<!--  配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
		p:driverClass="${c3p0.driverClass}"
		p:jdbcUrl="${c3p0.jdbcUrl}"
		p:user="${c3p0.user}"
		p:password="${c3p0.password}"
		p:minPoolSize="${c3p0.minPoolSize}"
		p:maxPoolSize="${c3p0.maxPoolSize}"
		p:initialPoolSize="${c3p0.initialPoolSize}"/>
		
   	<!-- 配置SessionFactory -->
   	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
   	    p:dataSource-ref="dataSource"
   	    p:configLocation="classpath:hibernate.cfg.xml">
   	    <!-- 持久化类采用包扫描 -->
   	    <property name="packagesToScan">
   	    	<list>
   	    		<value>cn.itcast.bos.entity</value>
   	    	</list>
   	    </property>
   	</bean>

   	<!-- 配置TransactionManager -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager"
   	    p:sessionFactory-ref="sessionFactory"/>
   	    
   	<!-- 声明式事务配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 配置事务属性 -->
		<tx:attributes>
			<!-- set开头的方法，只能做查询 read-only:true(没有开启事务) connection.setAutoCommit(true) -->
			<tx:method name="set*" read-only="true"/>
			<!-- get开头的方法，只能做查询 read-only:true(没有开启事务)-->
			<tx:method name="save*" read-only="false" rollback-for="java.lang.RuntimeException"/>
			<!-- 剩余的方法，CRUD read-only:false(开启事务)-->
			<tx:method name="*" read-only="false"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置日志对象 -->
	<bean id="logAdvice" class="cn.itcast.bos.aop.LogAdvice"/>
	
   	<!-- 切面配置 -->
   	<aop:config>
   		<!-- 定义切入点表达式(切业务层) -->
   		<aop:pointcut expression="execution(* cn.itcast.bos.service.*.*.*.*(..))" id="pointcut"/>
   		
   		<!-- 把事务切面Bean txAdvice 运用到 指定的切入点 (事务切面配置) -->
   		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
   		
   		<!-- 日志切面配置 -->
   		<aop:aspect ref="logAdvice">
   			<!-- 在调用业务层方法，出现异常之后才调用 error -->
   			<aop:after-throwing method="error" pointcut-ref="pointcut" throwing="ex"/>
   		</aop:aspect>
   		
   	</aop:config>
   	
   	<!-- 配置主键生成器 -->
   	<bean id="generatorDao" class="cn.itcast.bos.hibernate.impl.GeneratorDaoImpl"/>
</beans>